[versions]
group = "dev.jordond"
sdk-target = "34"
sdk-compile = "34"
sdk-min = "21"
jvmTarget = "17"
agp = "8.4.1"
kotlin = "2.0.0"
kotlinx-coroutines = "1.9.0-RC"
compose = "1.6.7"
compose-multiplatform = "1.6.11"
androidx-activity = "1.9.0"
androidx-lifecycle = "2.8.1"
androidx-core = "1.13.1"
androidx-fragment = "1.7.1"
androidx-startup = "1.1.1"
androidx-activityCompose = "1.9.0"
kermit = "2.0.3"
binaryCompatibility = "0.14.0"
dokka = "1.9.20"
publish = "0.28.0"
poko = "0.16.0"
versions = "0.51.0"
kotest = "5.9.1"
ktor = "3.0.0-wasm2"
voyager = "1.1.0-beta02"
stateHolder = "1.1.0"

[libraries]
androidx-activity-compose = { module = "androidx.activity:activity-compose", version.ref = "androidx-activityCompose" }
androidx-activity = { module = "androidx.activity:activity-ktx", version.ref = "androidx-activity" }
androidx-lifecycle = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "androidx-lifecycle" }
androidx-fragment = { module = "androidx.fragment:fragment-ktx", version.ref = "androidx-fragment" }
androidx-startup = { module = "androidx.startup:startup-runtime", version.ref = "androidx-startup" }
androidx-core = { group = "androidx.core", name = "core-ktx", version.ref = "androidx-core" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-core-jvm = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm", version.ref = "kotlinx-coroutines" }
kotlinx-coroutines-android = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinx-coroutines" }
ktor-client-core = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-okhttp = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-android = { module = "io.ktor:ktor-client-android", version.ref = "ktor" }
ktor-client-darwin = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
compose-ui-tooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
compose-ui-tooling-preview = { module = "androidx.compose.ui:ui-tooling-preview", version.ref = "compose" }
kotest-assertions = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kermit = { module = "co.touchlab:kermit", version.ref = "kermit" }
stateHolder = { module = "dev.stateholder:core", version.ref = "stateHolder" }
stateHolder-compose = { module = "dev.stateholder:extensions-compose", version.ref = "stateHolder" }
stateHolder-voyager = { module = "dev.stateholder:extensions-voyager", version.ref = "stateHolder" }
voyager-navigator = { module = "cafe.adriel.voyager:voyager-navigator", version.ref = "voyager" }
voyager-screenModel = { module = "cafe.adriel.voyager:voyager-screenmodel", version.ref = "voyager" }
gradlePlugin-android = { module = "com.android.tools.build:gradle", version.ref = "agp" }
gradlePlugin-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
gradlePlugin-compose = { module = "org.jetbrains.compose:compose-gradle-plugin", version.ref = "compose-multiplatform" }
gradlePlugin-publish = { module = "com.vanniktech:gradle-maven-publish-plugin", version.ref = "publish" }

[bundles]
logic-plugins = ["gradlePlugin-android", "gradlePlugin-kotlin", "gradlePlugin-compose", "gradlePlugin-publish"]
stateHolder = ["stateHolder", "stateHolder-compose", "stateHolder-voyager"]
voyager = ["voyager-navigator", "voyager-screenModel"]

[plugins]
multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
compose = { id = "org.jetbrains.compose", version.ref = "compose-multiplatform" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
android-library = { id = "com.android.library", version.ref = "agp" }
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
dependencies = { id = "com.github.ben-manes.versions", version.ref = "versions" }
binaryCompatibility = { id = "org.jetbrains.kotlinx.binary-compatibility-validator", version.ref = "binaryCompatibility" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
publish = { id = "com.vanniktech.maven.publish", version.ref = "publish" }
poko = { id = "dev.drewhamilton.poko", version.ref = "poko" }
convention-multiplatform = { id = "convention.multiplatform", version = "0" }
